name: Create release and upload to Apple and Google
on:
  #  push:
  #    tags:
  #      - 'v[0-9]+.[0-9]+.[0-9]*'
  pull_request:

jobs:
  build:
    name: Build ios and android package
    runs-on: self-hosted #macos-latest
    steps:
      - name: Set up Go 1.19.1
        uses: actions/setup-go@v2
        with:
          go-version: 1.19.1

      - name: Install flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.3.2'

      - name: Check out code
        uses: actions/checkout@v3

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.APPLE_BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          APP_PROVISION_PROFILE_BASE64: ${{ secrets.APPLE_APP_PROVISIONING_PROFILE }}
          EXT_PROVISION_PROFILE_BASE64: ${{ secrets.APPLE_EXT_PROVISIONING_PROFILE }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH="$RUNNER_TEMP/build_certificate.p12"
          APP_PP_PATH="$RUNNER_TEMP/app_pp.mobileprovision"
          EXT_PP_PATH="$RUNNER_TEMP/ext_pp.mobileprovision"
          KEYCHAIN_PATH="$RUNNER_TEMP/app-signing.keychain-db"

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output "$CERTIFICATE_PATH"
          echo -n "$APP_PROVISION_PROFILE_BASE64" | base64 --decode --output "$APP_PP_PATH"
          echo -n "$EXT_PROVISION_PROFILE_BASE64" | base64 --decode --output "$EXT_PP_PATH"

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"
          security set-keychain-settings -lut 21600 "$KEYCHAIN_PATH"
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" "$KEYCHAIN_PATH"

          # import certificate to keychain
          security import "$CERTIFICATE_PATH" -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k "$KEYCHAIN_PATH"
          security list-keychain -d user -s "$KEYCHAIN_PATH"

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp "$APP_PP_PATH" "$EXT_PP_PATH" ~/Library/MobileDevice/Provisioning\ Profiles

      - name: get build name and number, install dependencies
        run: |
          go install golang.org/x/mobile/cmd/gomobile@latest
          gomobile init

          flutter pub get

          ##TODO: delete before merge, testing only
          #GITHUB_REF=refs/tags/v0.0.1
          #echo "BUILD_NAME=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV
          echo "BUILD_NAME=0.0.1" >> $GITHUB_ENV

          #TODO: get the build number from google play, easier that way
          echo "BUILD_NUMBER=$((GITHUB_RUN_NUMBER+54))" >> $GITHUB_ENV

          touch env.sh

      - name: build ios
        run: |
          echo "Build: $BUILD_NAME"
          echo "Build number: $GITHUB_RUN_NUMBER"
          flutter build ipa --build-name "$BUILD_NAME" --build-number "$GITHUB_RUN_NUMBER" --release -v
          ls -l build/
          ls -l build/ios/
          ls -l build/ios/ipa/
#          xcrun altool --upload-app --type ios -f build/ios/ipa/*.ipa --apiKey your_api_key --apiIssuer your_issuer_id

      - name: collect ipa artifacts
        uses: actions/upload-artifact@v2
        with:
          name: release-ipa
          path: build/ios/ipa/*.ipa

      - name: Clean up keychain and provisioning profile
        if: ${{ always() }}
        run: |
          security delete-keychain $RUNNER_TEMP/app-signing.keychain-db
          rm ~/Library/MobileDevice/Provisioning\ Profiles/*